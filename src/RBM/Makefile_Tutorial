A Sample Makefile

The same process of compiling and linking source files carryed out in the above example with issueing compiler commands in the shell command line could be easily accomplished with a makefile. Hence, one needs to write a makefile only once and build program (compile + link = buld) with a command: make in the shell command line.

Here is a straightforward makefile that describes the way an executable file called: execname depends on four source files (one of which is a module file). This makefile is written for the above presented example.

# This is an commentary line in a makefile
# Start of the makefile
execname: global.o main.o function1.o subroutine1.o
    ifort -o execname global.o function1.o subroutine1.o main.o
global.mod: global.o global.f90
    ifort -c global.f90
global.o: global.f90
    ifort -c global.f90
main.o: global.mod main.f90
    ifort -c main.f90
function1.o: global.mod function1.f90
    ifort -c function1.f90
subroutine1.o: subroutine1.f90
    ifort -c subroutine1.f90
clean:
    rm global.mod global.o main.o function1.o subroutine1.o execname
# End of the makefile

This file should be saved under the directory where the source files are, and it should be given a following name: makefile. Long lines in a makefile could be continued with a following symbol: \. Commentary lines are presseded with a following symbol: #.

To use this makefile to create the executable file called `execname', type:

    make

To use this makefile to delete the executable file and all the object files from the directory, type:

    make clean

When a target is a file, it needs to be recompiled or relinked if any of its prerequisites change. In addition, any prerequisites that are themselves automatically generated should be updated first. A shell command follows each line that contains a target and prerequisites. These shell commands say how to update the target file. A tab character must come at the beginning of every command line to distinguish commands lines from other lines in the makefile. (Bear in mind that `make' does not know anything about how the commands work. It is up to you to supply commands that will update the target file properly. All `make' does is execute the commands in the rule you have specified when the target file needs to be updated.)

The target `clean' is not a file, but merely the name of an action. Since you normally do not want to carry out the actions in this rule, `clean' is not a prerequisite of any other rule. Consequently, `make' never does anything with it unless you tell it specifically. Note that this rule not only is not a prerequisite, it also does not have any prerequisites, so the only purpose of the rule is to run the specified commands. Targets that do not refer to files but are just actions are called "phony targets".

By default, `make' starts with the first target. This is called the "default goal". In the simple example of the previous section, the default goal is to update the executable program 'execname'; therefore, we put that rule first. Thus, when you give a command: make, `make' reads the makefile in the current directory and begins by processing the first rule. In the example, this rule is for relinking `edit'; but before `make' can fully process this rule, it must process the rules for the files that `edit' depends on, which in this case are the object files. Each of these files is processed according to its own rule. These rules say to update each `.o' file by compiling its source file. The recompilation must be done if the source file, or any of the header files named as prerequisites, is more recent than the object file, or if the object file does not exist. The other rules are processed because their targets appear as prerequisites of the goal. If some other rule is not depended on by the goal (or anything it depends on, etc.), that rule is not processed, unless you tell `make' to do so (with a command such as `make clean').

After recompiling whichever object files need it, `make' decides whether to relink `execname'. This must be done if the file `execname' does not exist, or if any of the object files are newer than it. If an object file was just recompiled, it is now newer than `execname', so `execname' is relinked.


Tip 	

Here are some usefull rules for creating simple makefiles. First line in the makefile should define the executable program, with listed all prerequisites (needed object and module files), followed by a compiler command in the next line. Tab character must be placed in front of the compiler command! 

After defining target (executable file), one should follow with definitions for the module file (.mod file) and then object file of the corresponding module file (.o of the module file). For the .mod file a prerequisites are corresponding .o and .f90 files. Tab character must be placed in front of the compiler command!

The order just described above should always be followed!

Now you can list all other object files (.o files) with their prerequisites, in any order, followed with a compiler directive to build that object file (preceded with a tab character). Order of this 'other' object files in a makefile is completely arbitrary.

When listing an object file which uses module (such as: function1.o) corresponding module file (.mod file) must be specified as the prerequisite!
Rule 'clean' is arbitrary but usefull feature that should be implemented in all makefiles. It simply deletes (cleans) all object (and module) files from the current (working) directory, including (if you wish) an executable file.

Variables

In order to accelerate the process of writing makefiles, and to make them more readable one could use variables. Variables are also called macros. For example, in the above simple makefile example, the rule for makeing target: execname lists all object files as prerequisites. If a number of files in the project is large, this list could become quite long. It can be also seen from the above example that rule: clean also lists all this object files again.

In order to reduce this, a variable could be defined as follows:

    objects = global.o main.o funkcija1.o subroutina1.o

and then use this variable when appropriate, as follows:

        execname: $(objects)
        ifort -o execname $(objects)

    clean:
        rm execname $(objects)

Another usefull way of using variables (macros) is to define the type / name of compiler which is used in the conrete makefile. For example, if you wish to use the above makefile with a g95 fortran compiler you would have to replace every single 'ifort' command with a 'g95' command, throughout the makefile. This can be rather difficult and error prone. Easier way is to define the compiler command (variable) at the beginig of the makefile, such as:

        f90comp = ifort

The same makefile presented above should now look something like this:

# Start of the makefile
# Defining variables
objects = global.o main.o function1.o subroutine1.o
f90comp = ifort
# Makefile
execname: $(objects)
    $(f90comp) -o execname $(objects)
global.mod: global.o global.f90
    $(f90comp) -c global.f90
global.o: global.f90
    $(f90comp) -c global.f90
main.o: global.mod main.f90
    $(f90comp) -c main.f90
function1.o: global.mod function1.f90
    $(f90comp) -c function1.f90
subroutine1.o: subroutine1.f90
    $(f90comp) -c subroutine1.f90
# Cleaning everything
clean:
    rm global.mod execname
    rm $(objects)
# End of the makefile

If you now wish to change compiler command from ifort to for example g95 all you need to do is alter the line where compiler command is defined (under variables), as follows:

        f90comp = g95

and that is it! This same makefile can be now used with a g95 fortran compiler, with the 'make' command. Variables are defined at the begining of the makefile! Usefull variable which can be defined for the makefiles is one which defines compiler options. In this way, various compiler optiones (switches) could be activated / deactivated in a simple manner. For example, one can define the following variable:

    switch = -O3

which represents a compiler optimization option for the Intel Fortran Compiler on Linux. With this new variable, above presented makefile looks like this:

# Start of the makefile
# Defining variables
objects = global.o main.o function1.o subroutine1.o
f90comp = ifort
switch = -O3
# Makefile
execname: $(objects)
    $(f90comp) -o execname $(switch) $(objects)
global.mod: global.o global.f90
    $(f90comp) -c $(switch) global.f90
global.o: global.f90
    $(f90comp) -c $(switch) global.f90
main.o: global.mod main.f90
    $(f90comp) -c $(switch) main.f90
function1.o: global.mod function1.f90
    $(f90comp) -c $(switch) function1.f90
subroutine1.o: subroutine1.f90
    $(f90comp) -c $(switch) subroutine1.f90
# Cleaning everything
clean:
    rm global.mod
    rm $(objects)
# End of the makefile

If one wants to remove optimization or compile with different optimization options all he/she needs to do is redefine that variable at the beginning of the makefile.

Inference Rules

Inference rules generalize the build process so you don't have to give an explicit rule for each target. As an example, compiling Fortran 90 source (.f90 files) into object files (.o files) is a common occurrence as can be seen from the above example. Rather than requiring a statement that each .o file depends on a like-named .f90 file, make uses an inference rule to infer that dependency. The source determined by an inference rule is called the inferred source. Inference rules are rules distinguished by the use of the character “%” in the dependency / rule line of the makefile. Hence, one can give make a set of rules for creating files with a certain suffix from files with the same (or approximatelly the same) root file name, but a different suffix. For example, the following lines in the makefile:

    %.o: %.f90
            $(f90comp) -c $(switch) $<

tells make that all .o files are created from the corresponding .f90 files. The command that followed will recompile any .f90 file if it is newer than the corresponding .o file. Hence, this line uses the make internal macro  $<, which translates to "any dependency that is more recent than its corresponding target." This internal macro can only be used in suffix rules. Exceptions to the suffix rule can be stated explicitly. By using this newly introduced suffix rule, above described makefile might look something like this:

# Start of the makefile
# Defining variables
objects = global.o main.o function1.o subroutine1.o
f90comp = ifort
switch = -O3
# Makefile
execname: $(objects)
    $(f90comp) -o execname $(switch) $(objects)
global.mod: global.o global.f90
    $(f90comp) -c $(switch) global.f90
global.o: global.f90
    $(f90comp) -c $(switch) global.f90
main.o: global.mod main.f90
    $(f90comp) -c $(switch) main.f90
function1.o: global.mod function1.f90
    $(f90comp) -c $(switch) function1.f90
%.o: %.f90
    $(f90comp) -c $(switch) $<
# Cleaning everything
clean:
    rm global.mod
    rm $(objects)
# End of the makefile

There isn't much need for this suffix rule in the above example, due to it's simplicity. But, by this rule, every source code file (in the project workspace) which doesn't use module file will be included in the makefile. In this way, makefiles for very large projects (with large number of source code files) could be easily generated / written. In this way, by using suffix rules, one doesn't need to write makefile rule for each source code file. One suffix rule with $< macro will define makefile rule for the majority of source code files. Additional rules for those source code files which use modules are written separately. Rule which states that module file needs to be compiled before source code file (which uses that module file) still holds.
